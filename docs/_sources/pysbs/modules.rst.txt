API Content
===========

Demos
-----
.. toctree::
   :maxdepth: 4

   demohelloworld module: A very simple function that creates a basic Substance, which uses the API without argument file<pysbs_demos/demohelloworld>
   demos module: Set a sample functions to demonstrate the use of the API, using argument files<pysbs_demos/demos>
   demos_batchtools module: Set a sample functions to demonstrate the use of the API with the batchtools, using argument files<pysbs_demos/demos_batchtools>
   script_update_with_sbsupdater: Script allowing to update all Substances in a folder using the Batch Tool SBSUpdater<pysbs_demos/script_update_with_sbsupdater>

Substance definition
--------------------
.. toctree::
   :maxdepth: 4
   
   common_interfaces module: Common interfaces<common_interfaces/common_interfaces>
   sbsarchive module: Substance archive definition (.sbsar)<sbsarchive/sbsarchive>
   substance module: Substance definition (.sbs)<substance/substance>
   graph module: Graph and Function definition <graph/graph>
   compnode module: Compositing node definitions<compnode/compnode>
   params module: Parameters definition (dynamic or constant)<params/params>
   sbscommon module: Common classes related to SBS package<sbscommon/sbscommon>
   mdl module: MDL graph definition and all objects related to MDL<mdl/mdl>
   sbspreset module: Preset file management (.sbsprs)<sbspreset/sbspreset>
   sbsprj module: Substance Designer project file management (.sbsprj)<sbsproject/projectmgrdoc>
   ModelGraph module: ModelGraph definition and all objects related to ModelGraph<modelgraph/modelgraphindex>
   ModuleGraph module: ModuleGraph definition and all objects related to ModuleGraph<modulegraph/modulegraphindex>

Libraries
---------
.. toctree::
   :maxdepth: 4
   
   sbsenum module: Types and enumeration <sbsenum>
   sbslibrary module: Substance libraries<sbslibrary/sbslibrary>
   sbsbakers module: Baking Parameters library<sbsbakers/sbsbakerslibrary>

Helpers
-------
.. toctree::
   :maxdepth: 4
   
   autograph module: Automatic generation and layout of graphs: easier way to create function graphs using arithmetic operators<autograph/autograph>
   batchtools module: Utilities to call the Substance Batchtools<batchtools/batchtools overview>
   sbscleaner module: Substance cleaner: allows to clean useless parameters and nodes of graph and function<sbscleaner>
   sbsexporter module: Substance exporter: used to export a .sbs file with its dependencies into a self-contained package<sbsexporter>
   sbsgenerator module: Substance generator helper<sbsgenerator>
   sbsimpactmanager module: Allows to propagate changes made on a Substance to all its references in a particular tree<sbsimpactmanager>
   sbsparser module: Substance parser: used to deserialize a .sbs file<sbsparser>
   sbswriter module: Substance writer: used to serialize SBSDocument into a .sbs file<sbswriter>
   psdparser module: Adobe Photoshop Document (.psd) file parser<psdparser>
   qtclasses module: Helpers classes to read/write PyQt objects<qtclasses/qtclasses>

Execution context
-----------------
.. toctree::
   :maxdepth: 4
   
   context module: Execution context <context>
   functions module: Entry point for functions called by Substance Designer<functions>
